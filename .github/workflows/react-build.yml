name: React build

on:
  push:
    branches: ["main"]
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: ["main"]

permissions:
  contents: read

env:
  AWS_REGION: "ap-northeast-2"
  ECR_REPOSITORY: "blocko-devops-test"
  ECS_SERVICE: "blocko-devops-test-app"
  ECS_CLUSTER: "blocko-devops-test-cluster"
  ECS_TASK_DEFINITION: .aws/definition/blocko-devops-register-task-definition-revision1.json
  CONTAINER_NAME: "blocko-devops-test"
  IMAGE_TAG: "latest"

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: CheckOut
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Cache node modules, Install Dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
          run: npm ci

      - name: Lint
        uses: wearerequired/lint-action@v2
        with:
          eslint: true

      - name: Test
        run: npm run test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: CheckOut
        uses: actions/checkout@v3

      - name: Build
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY_PUBLIC: "public.ecr.aws/x3j1o7j5"
          IMAGE_TAG: "1.0"
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/x3j1o7j5
          docker build -t $ECR_REGISTRY_PUBLIC/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY_PUBLIC/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY_PUBLIC/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
